#include <time.h>
#include <unistd.h>
#include "randomv.h"

//! constructor
gsl_rng* randomv::Gr=0;
void randomv::initialize(void){
  gsl_rng_env_setup();
  gsl_rng_default_seed = (unsigned long)time(0)*getpid();
  const gsl_rng_type *Gt = gsl_rng_default;
  randomv::Gr = gsl_rng_alloc (Gt);
}

//! Sample a random number from uniform distribution [0,1)
double randomv::sampleUniform(void){
  //[0,1)
  return gsl_rng_uniform(randomv::Gr);
}

int randomv::sampleUniformInt(int n){
 //~[0,n-1)
  return gsl_rng_uniform_int(randomv::Gr, n);
}

unsigned int randomv::sampleBinomial(double p, int N){
  return gsl_ran_binomial(randomv::Gr, p, N);
}

//! Sample a random number from a normal distribution
double randomv::sampleNormal(double sigma){
  return gsl_ran_gaussian(randomv::Gr, sigma);
}

double randomv::sampleNormal(double mu, double sigma){
  return gsl_ran_gaussian(randomv::Gr, sigma) + mu;
}

//! Sample a random number from an exponential distribution with mean mu
double randomv::sampleExponential(double mu){
  //mu: mean
  //mu = 1 / lambda
  return gsl_ran_exponential(randomv::Gr, mu);
}

double randomv::sampleGamma(double alpha, double beta){
  return gsl_ran_gamma(randomv::Gr, alpha, beta);
}

void randomv::sampleMultinomial(size_t K, unsigned int N, const double p[], unsigned int n[]){
  gsl_ran_multinomial(randomv::Gr, K, N, p, n);
}

double randomv::samplePareto(double alpha, double beta){
  return gsl_ran_pareto(randomv::Gr, alpha, beta);
}

double randomv::samplePoisson(double lambda){
  return gsl_ran_poisson(randomv::Gr, lambda);
}

void randomv::sampleDirVector(int dimensions, size_t n, double* x){
  gsl_ran_dir_nd(randomv::Gr, n, x);
}
